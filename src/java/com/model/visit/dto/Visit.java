package com.model.visit.dto;
// Generated Mar 26, 2012 5:50:17 PM by Hibernate Tools 3.2.1.GA
 
import com.model.bill.dto.Bill;
import com.model.prescription.dto.Prescription;
import com.model.patient.dto.Patient;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Visit generated by hbm2java
 */
@Entity
@Table(name = "visit", schema = "public")
@SequenceGenerator(name = "visit_seq", sequenceName = "visit_seq")
@org.hibernate.annotations.Entity(dynamicUpdate=true)
@SuppressWarnings("serial")
public class Visit implements java.io.Serializable {

    private long id;
    private Patient patient;
    private Date remindertime;
    private Date visittime;
    private long patientrating;
    private String remarks;
    private Long pulse;
    private String bp;
    private Long rr;
    private String diagnosis;
    private String investigation;
    private String treatment;
    private String presentcomplaint;
    private Boolean status;
    private String finaldiagnosis;
    private String departmenttype;
     private String doctorname;
     private String consultancytypename;
    private Set<Prescription> prescriptions = new HashSet<Prescription>(0);
    private Set<Bill> bills = new HashSet<Bill>(0);

    /**
     *
     */
    public Visit() {
    }   

    /**
     *
     * @return
     */
    @Id
    @Column(name = "id", unique = true, nullable = false)
    @GeneratedValue(generator = "visit_seq")
    public long getId() {
        return this.id;
    }

    /**
     *
     * @param id
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     *
     * @return
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "patientid", nullable = false)
    public Patient getPatient() {
        return this.patient;
    }

    /**
     *
     * @param patient
     */
    public void setPatient(Patient patient) {
        this.patient = patient;
    }

    /**
     *
     * @return
     */
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "remindertime", nullable = false, length = 29)
    public Date getRemindertime() {
        return this.remindertime;
    }

    /**
     *
     * @param remindertime
     */
    public void setRemindertime(Date remindertime) {
        this.remindertime = remindertime;
    }

    /**
     *
     * @return
     */
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "visittime", nullable = false, length = 29)
    public Date getVisittime() {
        return this.visittime;
    }

    /**
     *
     * @param visittime
     */
    public void setVisittime(Date visittime) {
        this.visittime = visittime;
    }

    /**
     *
     * @return
     */
    @Column(name = "patientrating", nullable = false)
    public long getPatientrating() {
        return this.patientrating;
    }

    /**
     *
     * @param patientrating
     */
    public void setPatientrating(long patientrating) {
        this.patientrating = patientrating;
    }

    /**
     *
     * @return
     */
    @Column(name = "remarks")
    public String getRemarks() {
        return this.remarks;
    }

    /**
     *
     * @param remarks
     */
    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    /**
     *
     * @return
     */
    @Column(name = "pulse")
    public Long getPulse() {
        return this.pulse;
    }

    /**
     *
     * @param pulse
     */
    public void setPulse(Long pulse) {
        this.pulse = pulse;
    }

    /**
     *
     * @return
     */
    @Column(name = "bp", length = 10)
    public String getBp() {
        return this.bp;
    }

    /**
     *
     * @param bp
     */
    public void setBp(String bp) {
        this.bp = bp;
    }

    /**
     *
     * @return
     */
    @Column(name = "rr")
    public Long getRr() {
        return this.rr;
    }

    /**
     *
     * @param rr
     */
    public void setRr(Long rr) {
        this.rr = rr;
    }

    /**
     *
     * @return
     */
    @Column(name = "diagnosis")
    public String getDiagnosis() {
        return this.diagnosis;
    }

    /**
     *
     * @param diagnosis
     */
    public void setDiagnosis(String diagnosis) {
        this.diagnosis = diagnosis;
    }

    /**
     *
     * @return
     */
    @Column(name = "investigation")
    public String getInvestigation() {
        return this.investigation;
    }

    /**
     *
     * @param investigation
     */
    public void setInvestigation(String investigation) {
        this.investigation = investigation;
    }

    /**
     *
     * @return
     */
    @Column(name = "treatment")
    public String getTreatment() {
        return this.treatment;
    }

    /**
     *
     * @param treatment
     */
    public void setTreatment(String treatment) {
        this.treatment = treatment;
    }

    /**
     *
     * @return
     */
    @Column(name = "presentcomplaint")
    public String getPresentcomplaint() {
        return this.presentcomplaint;
    }

    /**
     *
     * @param presentcomplaint
     */
    public void setPresentcomplaint(String presentcomplaint) {
        this.presentcomplaint = presentcomplaint;
    }

    /**
     *
     * @return
     */
    @Column(name = "status")
    public Boolean getStatus() {
        return this.status;
    }

    /**
     *
     * @param status
     */
    public void setStatus(Boolean status) {
        this.status = status;
    }
    /**
     *
     * @return
     */
    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="visit")
    public Set<Prescription> getPrescriptions() {
        return this.prescriptions;
    }

    /**
     *
     * @param prescriptions
     */
    public void setPrescriptions(Set<Prescription> prescriptions) {
        this.prescriptions = prescriptions;
    }

    /**
     *
     * @return
     */
    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="visit")
    public Set<Bill> getBills() {
        return this.bills;
    }

    /**
     *
     * @param bills
     */
    public void setBills(Set<Bill> bills) {
        this.bills = bills;
    }

    /**
     * @return the finaldiagnosis
     */
    @Column(name = "finaldiagnosis")
    public String getFinaldiagnosis() {
        return finaldiagnosis;
    }

    /**
     * @param finaldiagnosis the finaldiagnosis to set
     */
    public void setFinaldiagnosis(String finaldiagnosis) {
        this.finaldiagnosis = finaldiagnosis;
    }

    @Column(name="departmenttype", length=150)
    public String getDepartmenttype() {
        return this.departmenttype;
    }

    public void setDepartmenttype(String departmenttype) {
        this.departmenttype = departmenttype;
    }

    @Column(name="doctorname", length=150)
    public String getDoctorname() {
        return this.doctorname;
    }

    public void setDoctorname(String doctorname) {
        this.doctorname = doctorname;
    }

    @Column(name="consultancytypename", length=150)
    public String getConsultancytypename() {
        return this.consultancytypename;
    }

    public void setConsultancytypename(String consultancytypename) {
        this.consultancytypename = consultancytypename;
    }
    /**
     *
     */
    public static class VisitComparator implements Comparator<Visit>{
        public int compare(Visit o1, Visit o2) {
            return o2.getVisittime().compareTo(o1.getVisittime());
        }
    }
}


